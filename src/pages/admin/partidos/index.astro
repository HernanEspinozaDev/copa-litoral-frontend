---
import AdminLayout from '@layouts/AdminLayout.astro';
import Toast from '@components/Toast.astro';

// Fetch tournaments and matches data
const [torneosResponse, partidosResponse] = await Promise.all([
  fetch(`${Astro.url.origin}/api/tournaments-data`),
  fetch(`${Astro.url.origin}/api/partidos`)
]);

const torneos = await torneosResponse.json();
const { success, data: partidos } = await partidosResponse.json();
const allMatches = success ? partidos : [];

// Organize by years
const years = [...new Set(torneos.map(t => t.anio))].sort((a, b) => b - a);
---

<AdminLayout title="Partidos" description="Gestión de partidos y llaves del torneo">
  
  <!-- Header -->
  <div class="bg-gradient-to-r from-green-600 to-green-800 rounded-2xl p-8 mb-8 text-white">
    <div class="flex justify-between items-center">
      <div>
        <h1 class="text-4xl font-bold mb-2">Gestión de Partidos</h1>
        <p class="text-green-100">Organiza y gestiona los partidos por torneo y categoría</p>
      </div>
      <a href="/admin/partidos/crear" class="bg-white text-green-600 hover:bg-green-50 font-semibold py-3 px-6 rounded-xl transition duration-300 inline-flex items-center shadow-lg">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" viewBox="0 0 20 20" fill="currentColor">
          <path fill-rule="evenodd" d="M10 3a1 1 0 011 1v5h5a1 1 0 110 2h-5v5a1 1 0 11-2 0v-5H4a1 1 0 110-2h5V4a1 1 0 011-1z" clip-rule="evenodd" />
        </svg>
        Crear Partido
      </a>
    </div>
  </div>

  <!-- Year Navigation -->
  <div class="bg-white rounded-xl shadow-sm border border-gray-100 p-6 mb-8">
    <h2 class="text-lg font-semibold text-gray-900 mb-4">Filtrar por año</h2>
    <div class="flex flex-wrap gap-3" id="year-nav">
      {years.map((year, index) => (
        <button 
          class={`year-btn px-6 py-3 rounded-xl font-medium transition-all duration-200 ${index === 0 ? 'bg-green-600 text-white shadow-lg' : 'bg-gray-100 text-gray-700 hover:bg-gray-200'}`}
          data-year={year}
        >
          {year}
        </button>
      ))}
    </div>
  </div>

  {years.map((year, yearIndex) => {
    const torneosDelAnio = torneos.filter(t => t.anio === year);
    
    return (
      <div id={`partidos-${year}`} class={`year-section ${yearIndex > 0 ? 'hidden' : ''}`}>
        <div class="space-y-6">
          {torneosDelAnio.map(torneo => {
            const statusInfo = {
              'inscripciones-abiertas': { text: 'Inscripciones Abiertas', class: 'bg-emerald-100 text-emerald-800 border-emerald-200' },
              'proximamente': { text: 'Próximamente', class: 'bg-amber-100 text-amber-800 border-amber-200' },
              'en-juego': { text: 'En Juego', class: 'bg-blue-100 text-blue-800 border-blue-200' },
              'finalizado': { text: 'Finalizado', class: 'bg-gray-100 text-gray-800 border-gray-200' }
            }[torneo.estado] || { text: 'Sin estado', class: 'bg-gray-100 text-gray-800 border-gray-200' };
            
            return (
              <details class="bg-white rounded-2xl shadow-lg border border-gray-100 overflow-hidden hover:shadow-xl transition-shadow duration-300 group">
                <summary class="bg-gradient-to-r from-green-600 to-orange-600 p-6 cursor-pointer list-none flex items-center justify-between">
                  <div>
                    <h2 class="text-2xl font-bold text-white mb-1">{torneo.titulo}</h2>
                    <p class="text-white/80 flex items-center">
                      <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z" />
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z" />
                      </svg>
                      {torneo.lugar}
                    </p>
                    <p class="text-white/80 flex items-center mt-1">
                      <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
                      </svg>
                      {torneo.fechas}
                    </p>
                  </div>
                  <div class="flex items-center space-x-4">
                    <span class={`px-3 py-1 text-xs font-semibold rounded-full border ${statusInfo.class}`}>
                      {statusInfo.text}
                    </span>
                    <svg class="w-5 h-5 text-white transition-transform group-open:rotate-180" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" />
                    </svg>
                  </div>
                </summary>
                
                <!-- Categories and Matches -->
                <div class="p-6">
                  <h3 class="text-lg font-semibold text-gray-900 mb-4">Categorías y Partidos</h3>
                  <div class="space-y-4">
                    {torneo.categorias.map(categoria => {
                      const partidosDeCategoria = allMatches.filter(p => 
                        p.torneo === torneo.titulo && p.categoria === categoria.nombre
                      );
                      
                      return (
                        <div class="bg-gray-50 rounded-xl p-4 border border-gray-200">
                          <div class="flex justify-between items-center mb-3">
                            <div>
                              <h4 class="font-semibold text-gray-900">{categoria.nombre}</h4>
                              <p class="text-sm text-gray-600">{partidosDeCategoria.length} partidos programados</p>
                            </div>
                            <div class="flex space-x-2">
                              <a 
                                href={`/admin/partidos/crear?torneo=${encodeURIComponent(torneo.titulo)}&categoria=${encodeURIComponent(categoria.nombre)}&año=${year}`}
                                class="text-sm font-medium text-green-600 hover:text-green-800 transition-colors bg-green-50 px-3 py-1 rounded-lg"
                              >
                                + Crear Partido
                              </a>
                              {partidosDeCategoria.length > 0 && (
                                <button 
                                  class="ver-partidos-btn text-sm font-medium text-gray-600 hover:text-gray-800 transition-colors bg-gray-100 px-3 py-1 rounded-lg"
                                  data-torneo={torneo.titulo}
                                  data-categoria={categoria.nombre}
                                  data-year={year}
                                >
                                  Ver Partidos ({partidosDeCategoria.length})
                                </button>
                              )}
                            </div>
                          </div>
                          
                          {partidosDeCategoria.length > 0 && (
                            <div class="mt-3 space-y-2">
                              {partidosDeCategoria.slice(0, 3).map(partido => (
                                <div class="bg-white rounded-lg p-3 text-sm">
                                  <div class="flex justify-between items-center">
                                    <span class="font-medium">
                                      {partido.jugador1?.nombre || 'TBD'} vs {partido.jugador2?.nombre || 'TBD'}
                                    </span>
                                    <span class="text-gray-500">
                                      {partido.fecha} {partido.hora} - {partido.cancha}
                                    </span>
                                  </div>
                                </div>
                              ))}
                              {partidosDeCategoria.length > 3 && (
                                <p class="text-xs text-gray-500 text-center">
                                  y {partidosDeCategoria.length - 3} partidos más...
                                </p>
                              )}
                            </div>
                          )}
                        </div>
                      );
                    })}
                  </div>
                </div>
              </details>
            );
          })}
        </div>
      </div>
    );
  })}

  <!-- Modal para ver partidos -->
  <div id="partidosModal" class="fixed inset-0 bg-black bg-opacity-50 hidden z-50">
    <div class="flex items-center justify-center min-h-screen p-4">
      <div class="bg-white rounded-2xl shadow-2xl max-w-6xl w-full max-h-[80vh] overflow-hidden">
        <div class="p-6 border-b border-gray-200">
          <div class="flex justify-between items-center">
            <h3 id="modalTitle" class="text-xl font-bold text-gray-900"></h3>
            <button id="closeModal" class="text-gray-400 hover:text-gray-600 transition-colors">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
              </svg>
            </button>
          </div>
        </div>
        <div class="p-6 overflow-y-auto max-h-96">
          <div id="partidosList"></div>
        </div>
      </div>
    </div>
  </div>

  <script>
    document.addEventListener('DOMContentLoaded', () => {
      const yearNav = document.getElementById('year-nav');
      const modal = document.getElementById('partidosModal');
      const closeModal = document.getElementById('closeModal');
      const modalTitle = document.getElementById('modalTitle');
      const partidosList = document.getElementById('partidosList');

      // Year navigation
      yearNav.addEventListener('click', (e) => {
        if (e.target.classList.contains('year-btn')) {
          const selectedYear = e.target.dataset.year;

          // Update button styles
          yearNav.querySelectorAll('.year-btn').forEach(btn => {
            btn.classList.remove('bg-green-600', 'text-white', 'shadow-lg');
            btn.classList.add('bg-gray-100', 'text-gray-700');
          });
          e.target.classList.add('bg-green-600', 'text-white', 'shadow-lg');
          e.target.classList.remove('bg-gray-100', 'text-gray-700');

          // Show/hide sections
          document.querySelectorAll('.year-section').forEach(div => {
            if (div.id === `partidos-${selectedYear}`) {
              div.classList.remove('hidden');
            } else {
              div.classList.add('hidden');
            }
          });
        }
      });

      // Ver partidos
      document.addEventListener('click', async (e) => {
        if (e.target.classList.contains('ver-partidos-btn')) {
          const torneo = e.target.dataset.torneo;
          const categoria = e.target.dataset.categoria;
          const year = e.target.dataset.year;
          
          try {
            const response = await fetch('/api/partidos');
            const { success, data: allPartidos } = await response.json();
            
            if (success) {
              const partidos = allPartidos.filter(p => 
                p.torneo === torneo && p.categoria === categoria
              );
              
              modalTitle.textContent = `${categoria} - ${torneo} (${year})`;
              partidosList.innerHTML = '';
              
              if (partidos.length === 0) {
                partidosList.innerHTML = '<p class="text-gray-500 text-center">No hay partidos programados en esta categoría.</p>';
              } else {
                const table = document.createElement('div');
                table.className = 'overflow-x-auto';
                table.innerHTML = `
                  <table class="min-w-full divide-y divide-gray-200">
                    <thead class="bg-gray-50">
                      <tr>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Partido</th>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Fecha/Hora</th>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Cancha</th>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Fase</th>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Estado</th>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Acciones</th>
                      </tr>
                    </thead>
                    <tbody class="bg-white divide-y divide-gray-200">
                      ${partidos.map(partido => `
                        <tr>
                          <td class="px-6 py-4 whitespace-nowrap">
                            <div class="text-sm font-medium text-gray-900">
                              ${partido.jugador1?.nombre || 'TBD'} vs ${partido.jugador2?.nombre || 'TBD'}
                            </div>
                          </td>
                          <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                            ${partido.fecha} ${partido.hora}
                          </td>
                          <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                            ${partido.cancha}
                          </td>
                          <td class="px-6 py-4 whitespace-nowrap">
                            <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-blue-100 text-blue-800">
                              ${partido.fase} ${partido.grupo ? `- Grupo ${partido.grupo}` : ''}
                            </span>
                          </td>
                          <td class="px-6 py-4 whitespace-nowrap">
                            <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${
                              partido.estado === 'finalizado' ? 'bg-green-100 text-green-800' : 
                              partido.estado === 'en_curso' ? 'bg-yellow-100 text-yellow-800' : 
                              'bg-gray-100 text-gray-800'
                            }">
                              ${partido.estado}
                            </span>
                          </td>
                          <td class="px-6 py-4 whitespace-nowrap text-sm font-medium">
                            <a href="/admin/partidos/editar/${partido.id}" class="text-green-600 hover:text-green-800 mr-3">Editar</a>
                            <button class="text-red-600 hover:text-red-800 delete-partido-btn" data-id="${partido.id}">Eliminar</button>
                          </td>
                        </tr>
                      `).join('')}
                    </tbody>
                  </table>
                `;
                partidosList.appendChild(table);
              }
              
              modal.classList.remove('hidden');
            }
          } catch (error) {
            alert('Error al cargar partidos: ' + error.message);
          }
        }
      });

      // Close modal
      closeModal.addEventListener('click', () => {
        modal.classList.add('hidden');
      });

      // Close modal on backdrop click
      modal.addEventListener('click', (e) => {
        if (e.target === modal) {
          modal.classList.add('hidden');
        }
      });

      // Delete partido from modal
      document.addEventListener('click', async (e) => {
        if (e.target.classList.contains('delete-partido-btn')) {
          const partidoId = e.target.dataset.id;
          if (confirm('¿Estás seguro de que deseas eliminar este partido? Esta acción no se puede deshacer.')) {
            try {
              const response = await fetch(`/api/partidos/delete/${partidoId}`, {
                method: 'DELETE'
              });
              
              if (response.ok) {
                alert('Partido eliminado correctamente');
                window.location.reload();
              } else {
                const result = await response.json();
                alert(`Error al eliminar el partido: ${result.error}`);
              }
            } catch (error) {
              alert('Error de conexión: ' + error.message);
            }
          }
        }
      });
    });
  </script>
</AdminLayout>
