---
import AdminLayout from '@layouts/AdminLayout.astro';
import Toast from '@components/Toast.astro';
import torneosData from '../../../../lib/data/torneos.json';
import { promises as fs } from 'fs';
import path from 'path';

const { id } = Astro.params;
const categories = ["1ª Categoría", "2ª Categoría", "3ª Categoría", "4ª Categoría"];
const dataFilePath = path.resolve(process.cwd(), 'src/lib/data/torneos.json');

// Handle form submission
if (Astro.request.method === 'POST') {
  try {
    const formData = await Astro.request.formData();
    const anio = formData.get('anio') as string;
    const titulo = formData.get('titulo') as string;
    const fechaInicioValue = formData.get('fechaInicio') as string;
    const fechaFinValue = formData.get('fechaFin') as string;

    const formatDate = (date) => {
      return date.toLocaleDateString('es-ES', { day: 'numeric', month: 'long' });
    };

    const updatedTournament = {
      id: id,
      titulo: titulo,
      anio: parseInt(anio),
      lugar: formData.get('lugar') as string,
      fechas: `Del ${formatDate(new Date(fechaInicioValue + 'T00:00:00'))} al ${formatDate(new Date(fechaFinValue + 'T00:00:00'))}`,
      fechaInicio: fechaInicioValue,
      fechaFin: fechaFinValue,
      estado: formData.get('estado') as string,
      categorias: formData.getAll('categorias') as string[],
      totalJugadores: parseInt(formData.get('totalJugadores') as string), // Keep existing value
      formato: formData.get('formato') as string,
      precio: `$${formData.get('precioSocios')} socios / $${formData.get('precioGeneral')} general`,
      bases: formData.get('bases') as string,
      precioSocios: formData.get('precioSocios') as string,
      precioGeneral: formData.get('precioGeneral') as string,
      fechaLimiteInscripcion: formData.get('fechaLimiteInscripcion') as string,
    };

    let tournaments = [...torneosData];
    const index = tournaments.findIndex(t => t.id === id);

    if (index !== -1) {
      tournaments[index] = { ...tournaments[index], ...updatedTournament };
      await fs.writeFile(dataFilePath, JSON.stringify(tournaments, null, 2));
      return Astro.redirect('/admin/torneos');
    }
  } catch (error) {
    console.error(error);
    // Handle error
  }
}

// Fetch existing tournament data to populate the form
const tournaments = torneosData;
const tournament = tournaments.find(t => t.id === id);

if (!tournament) {
  return new Response('Torneo no encontrado', { status: 404 });
}
---

<AdminLayout title="Editar Torneo" description="Editar un torneo existente con información detallada">
  
  <div class="bg-gradient-to-r from-orange-600 to-red-600 rounded-2xl p-8 mb-8 text-white">
    <div class="flex justify-between items-center">
      <div>
        <h1 class="text-4xl font-bold mb-2">Editar Torneo</h1>
        <p class="text-orange-100">Modifica la información del torneo existente</p>
        <div class="mt-4 bg-orange-700 bg-opacity-50 rounded-lg p-3">
          <p class="text-sm">
            <strong>Editando:</strong> {tournament.titulo} ({tournament.anio})
          </p>
        </div>
      </div>
    </div>
  </div>

  <div class="max-w-4xl mx-auto">
    
    <form method="POST" class="bg-white rounded-2xl shadow-lg border border-gray-100 p-8 space-y-8">
      <input type="hidden" name="totalJugadores" value={tournament.totalJugadores} />

      <!-- Form fields... -->
      <div class="bg-gray-50 rounded-xl p-6">
        <h3 class="text-xl font-semibold text-gray-900 mb-4 flex items-center">
          <svg class="w-5 h-5 mr-2 text-orange-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
          </svg>
          Información General
        </h3>
        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
          <div class="col-span-2">
            <label for="titulo" class="block text-gray-700 font-semibold mb-2">Título del Torneo</label>
            <input type="text" id="titulo" name="titulo" value={tournament.titulo} required minlength="3" maxlength="100" class="w-full px-4 py-3 border border-gray-300 rounded-xl focus:outline-none focus:ring-2 focus:ring-orange-500 focus:border-transparent transition-all" />
            <div class="error-message hidden text-red-500 text-sm mt-1" id="titulo-error">El título debe tener entre 3 y 100 caracteres</div>
          </div>
          <div>
            <label for="anio" class="block text-gray-700 font-semibold mb-2">Año</label>
            <input type="number" id="anio" name="anio" value={tournament.anio} required min="2020" max="2030" class="w-full px-4 py-3 border border-gray-300 rounded-xl focus:outline-none focus:ring-2 focus:ring-orange-500 focus:border-transparent transition-all" />
            <div class="error-message hidden text-red-500 text-sm mt-1" id="anio-error">El año debe estar entre 2020 y 2030</div>
          </div>
          <div>
            <label for="estado" class="block text-gray-700 font-semibold mb-2">Estado del Torneo</label>
            <select id="estado" name="estado" required class="w-full px-4 py-3 border border-gray-300 rounded-xl focus:outline-none focus:ring-2 focus:ring-orange-500 focus:border-transparent transition-all">
              <option value="proximamente" selected={tournament.estado === 'proximamente'}>Próximamente</option>
              <option value="inscripciones-abiertas" selected={tournament.estado === 'inscripciones-abiertas'}>Inscripciones Abiertas</option>
              <option value="en-juego" selected={tournament.estado === 'en-juego'}>En Juego</option>
              <option value="finalizado" selected={tournament.estado === 'finalizado'}>Finalizado</option>
            </select>
          </div>
          <div class="col-span-2">
            <label for="lugar" class="block text-gray-700 font-semibold mb-2">Lugar</label>
            <input type="text" id="lugar" name="lugar" value={tournament.lugar} required minlength="3" maxlength="100" class="w-full px-4 py-3 border border-gray-300 rounded-xl focus:outline-none focus:ring-2 focus:ring-orange-500 focus:border-transparent transition-all" />
            <div class="error-message hidden text-red-500 text-sm mt-1" id="lugar-error">El lugar debe tener entre 3 y 100 caracteres</div>
          </div>
          <div>
            <label for="fechaInicio" class="block text-gray-700 font-semibold mb-2">Fecha de Inicio</label>
            <input type="date" id="fechaInicio" name="fechaInicio" value={tournament.fechaInicio} required class="w-full px-4 py-3 border border-gray-300 rounded-xl focus:outline-none focus:ring-2 focus:ring-orange-500 focus:border-transparent transition-all" />
          </div>
          <div>
            <label for="fechaFin" class="block text-gray-700 font-semibold mb-2">Fecha de Fin</label>
            <input type="date" id="fechaFin" name="fechaFin" value={tournament.fechaFin} required class="w-full px-4 py-3 border border-gray-300 rounded-xl focus:outline-none focus:ring-2 focus:ring-orange-500 focus:border-transparent transition-all" />
          </div>
        </div>
      </div>

      <div class="bg-blue-50 rounded-xl p-6">
        <h3 class="text-xl font-semibold text-gray-900 mb-4 flex items-center">
          <svg class="w-5 h-5 mr-2 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-4m-2 0h-4m-2 0h-4m-2 0H3m2-2V7a2 2 0 012-2h10a2 2 0 012 2v12M9 7h6m-6 4h6m-6 4h6" />
          </svg>
          Categorías y Formato
        </h3>
        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
          <div>
            <label class="block text-gray-700 font-semibold mb-2">Categorías Disponibles</label>
            <div id="categorias-container" class="p-3 border border-gray-300 rounded-xl bg-white">
              {categories.map(cat => (
                <label class="flex items-center p-2 hover:bg-gray-100 rounded-md">
                  <input type="checkbox" name="categorias" value={cat} class="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded" checked={tournament.categorias && tournament.categorias.includes(cat)}/>
                  <span class="ml-3 text-gray-700">{cat}</span>
                </label>
              ))}
            </div>
          </div>
          <div>
            <label for="formato" class="block text-gray-700 font-semibold mb-2">Formato del Torneo</label>
            <textarea id="formato" name="formato" rows="4" required minlength="10" maxlength="500" class="w-full px-4 py-3 border border-gray-300 rounded-xl focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all">{tournament.formato}</textarea>
          <div class="error-message hidden text-red-500 text-sm mt-1" id="formato-error">El formato debe tener entre 10 y 500 caracteres</div>
          </div>
        </div>
      </div>

      <div class="bg-green-50 rounded-xl p-6">
        <h3 class="text-xl font-semibold text-gray-900 mb-4 flex items-center">
          <svg class="w-5 h-5 mr-2 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1" />
          </svg>
          Inscripciones
        </h3>
        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
          <div>
            <label for="precioSocios" class="block text-gray-700 font-semibold mb-2">Precio Socios ($)</label>
            <input type="number" id="precioSocios" name="precioSocios" value={tournament.precioSocios} required min="0" max="999999" class="w-full px-4 py-3 border border-gray-300 rounded-xl focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-transparent transition-all" />
            <div class="error-message hidden text-red-500 text-sm mt-1" id="precioSocios-error">El precio debe ser un número positivo</div>
          </div>
          <div>
            <label for="precioGeneral" class="block text-gray-700 font-semibold mb-2">Precio General ($)</label>
            <input type="number" id="precioGeneral" name="precioGeneral" value={tournament.precioGeneral} required min="0" max="999999" class="w-full px-4 py-3 border border-gray-300 rounded-xl focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-transparent transition-all" />
            <div class="error-message hidden text-red-500 text-sm mt-1" id="precioGeneral-error">El precio debe ser un número positivo</div>
          </div>
          <div class="col-span-2">
            <label for="fechaLimiteInscripcion" class="block text-gray-700 font-semibold mb-2">Fecha Límite de Inscripción</label>
            <input type="date" id="fechaLimiteInscripcion" name="fechaLimiteInscripcion" value={tournament.fechaLimiteInscripcion} required class="w-full px-4 py-3 border border-gray-300 rounded-xl focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-transparent transition-all" />
          </div>
        </div>
      </div>

      <div class="bg-purple-50 rounded-xl p-6">
        <h3 class="text-xl font-semibold text-gray-900 mb-4 flex items-center">
          <svg class="w-5 h-5 mr-2 text-purple-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
          </svg>
          Bases del Torneo
        </h3>
        <div>
          <label for="bases" class="block text-gray-700 font-semibold mb-2">Contenido de las Bases</label>
          <textarea id="bases" name="bases" rows="10" required minlength="50" maxlength="5000" class="w-full px-4 py-3 border border-gray-300 rounded-xl focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-transparent transition-all">{tournament.bases}</textarea>
          <div class="error-message hidden text-red-500 text-sm mt-1" id="bases-error">Las bases deben tener entre 50 y 5000 caracteres</div>
        </div>
      </div>
      
      <div class="flex justify-end space-x-4 pt-4">
        <a href="/admin/torneos" class="px-6 py-3 bg-gray-100 text-gray-700 font-semibold rounded-xl hover:bg-gray-200 transition-all duration-200">
          Cancelar
        </a>
        <button type="submit" id="submit-btn" class="px-8 py-3 bg-orange-600 text-white font-semibold rounded-xl hover:bg-orange-700 transition-all duration-200 shadow-lg hover:shadow-xl">
          Guardar Cambios
        </button>
      </div>
    </form>
  </div>
  
<script>
document.addEventListener('DOMContentLoaded', function() {
  const form = document.querySelector('form');
  const submitBtn = document.getElementById('submit-btn');
  const anioInput = document.getElementById('anio');
  const fechaInicioInput = document.getElementById('fechaInicio');
  const fechaFinInput = document.getElementById('fechaFin');
  const fechaLimiteInscripcionInput = document.getElementById('fechaLimiteInscripcion');

  // Validation functions
  function validateField(fieldId, validationFn, errorMessage) {
    const field = document.getElementById(fieldId);
    const errorDiv = document.getElementById(fieldId + '-error');
    
    function validate() {
      const isValid = validationFn(field.value);
      
      if (!isValid) {
        field.classList.add('border-red-500');
        field.classList.remove('border-gray-300');
        errorDiv.textContent = errorMessage;
        errorDiv.classList.remove('hidden');
      } else {
        field.classList.remove('border-red-500');
        field.classList.add('border-gray-300');
        errorDiv.classList.add('hidden');
      }
      
      return isValid;
    }
    
    field.addEventListener('input', validate);
    field.addEventListener('blur', validate);
    
    return validate;
  }

  // Set up validations
  const validateTitulo = validateField('titulo', 
    value => value.length >= 3 && value.length <= 100,
    'El título debe tener entre 3 y 100 caracteres'
  );
  
  const validateAnio = validateField('anio', 
    value => {
      const year = parseInt(value);
      return year >= 2020 && year <= 2030;
    },
    'El año debe estar entre 2020 y 2030'
  );
  
  const validateLugar = validateField('lugar', 
    value => value.length >= 3 && value.length <= 100,
    'El lugar debe tener entre 3 y 100 caracteres'
  );
  
  const validateFormato = validateField('formato', 
    value => value.length >= 10 && value.length <= 500,
    'El formato debe tener entre 10 y 500 caracteres'
  );
  
  const validatePrecioSocios = validateField('precioSocios', 
    value => {
      const price = parseFloat(value);
      return price >= 0 && price <= 999999;
    },
    'El precio debe ser un número positivo'
  );
  
  const validatePrecioGeneral = validateField('precioGeneral', 
    value => {
      const price = parseFloat(value);
      return price >= 0 && price <= 999999;
    },
    'El precio debe ser un número positivo'
  );
  
  const validateBases = validateField('bases', 
    value => value.length >= 50 && value.length <= 5000,
    'Las bases deben tener entre 50 y 5000 caracteres'
  );

  // Date validation functions
  function setMinDateForDeadline() {
    const today = new Date().toISOString().split('T')[0];
    fechaLimiteInscripcionInput.min = today;
  }

  function updateDateLimits() {
    const year = anioInput.value;
    if (year) {
      fechaInicioInput.min = `${year}-01-01`;
      fechaInicioInput.max = `${year}-12-31`;
      fechaFinInput.min = `${year}-01-01`;
      fechaFinInput.max = `${year}-12-31`;
    }
  }

  function validateDates() {
    const fechaInicio = new Date(fechaInicioInput.value);
    const fechaFin = new Date(fechaFinInput.value);
    
    if (fechaInicioInput.value && fechaFinInput.value && fechaFin <= fechaInicio) {
      fechaFinInput.classList.add('border-red-500');
      return false;
    } else {
      fechaFinInput.classList.remove('border-red-500');
      return true;
    }
  }

  function validateCategories() {
    const checkboxes = document.querySelectorAll('input[name="categorias"]:checked');
    return checkboxes.length > 0;
  }

  anioInput.addEventListener('change', updateDateLimits);
  fechaInicioInput.addEventListener('change', () => {
    if (fechaInicioInput.value) {
      fechaFinInput.min = fechaInicioInput.value;
      const startDate = new Date(fechaInicioInput.value + 'T00:00:00');
      startDate.setDate(startDate.getDate() - 1);
      fechaLimiteInscripcionInput.max = startDate.toISOString().split('T')[0];
    }
    validateDates();
  });

  fechaFinInput.addEventListener('change', validateDates);

  // Form submission validation
  form.addEventListener('submit', function(e) {
    const validations = [
      validateTitulo(),
      validateAnio(),
      validateLugar(),
      validateFormato(),
      validatePrecioSocios(),
      validatePrecioGeneral(),
      validateBases(),
      validateDates(),
      validateCategories()
    ];
    
    const isFormValid = validations.every(isValid => isValid);
    
    if (!validateCategories()) {
      alert('Debes seleccionar al menos una categoría para el torneo.');
      e.preventDefault();
      return;
    }
    
    if (!isFormValid) {
      e.preventDefault();
      alert('Por favor corrige los errores en el formulario antes de continuar.');
    }
  });

  updateDateLimits();
  setMinDateForDeadline();
  if (fechaInicioInput.value) {
    fechaInicioInput.dispatchEvent(new Event('change'));
  }
});
</script>
</AdminLayout>